#demineur

import pygame
import sys
import random
import math
import time
pygame.init()


largeur = 500
hauteur = 600
screen = pygame.display.set_mode((largeur, hauteur))
pygame.display.set_caption("Game")

BLACK = (0, 0, 0)
WHITE = (255, 255, 255)
GRAY = (200, 200, 200)
RED = (255, 0, 0)
GR = (74, 74, 74)
BLUE = (0, 0, 255)
GREEN = (0, 255, 0)

box = 9
cellsize = (largeur-50) // box

font = pygame.font.Font(None, 25)

smallfont = pygame.font.SysFont('Corbel', 25)
text = smallfont.render('Continuer', True, GRAY)
button_width = 200
button_height = 30
button_x = (largeur) // 2 -  button_width //2
button_y = hauteur - button_height -  75


instruction = pygame.image.load('regle.jpg')

grid_list_=[
 [0,0,0,0,0,0,0,1,1],
 [1,1,0,0,0,0,1,2,'B'],
 ['B',2,0,0,0,0,2,'B',3],
 ['B',2,0,0,0,0,2,'B',2],
 [1,2,1,0,0,0,1,1,1],
 [1,2,'B',0,0,1,1,1,0],
 ['B',2,1,1,1,2,'B',1,0],
 [1,1,0,1,2,'B',2,1,0],
 [0,0,0,1,'B',2,0,0,0]]

vide=[
[0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0]]
def sqr(ligne,col,color):
    #LINE
    pygame.draw.rect(screen,WHITE,((25+50*ligne),(125+50*col),cellsize,cellsize),1)
    pygame.draw.rect(screen,color,((25+50*ligne)+1,(125+50*col)+1,48,48),40)

def grid():
    #LINE
    for line in range(box):
        for col in range(box):
            rectangle=pygame.draw.rect(screen,WHITE,((25+line*50),(125+col*50),cellsize,cellsize),1)

def grid_list():
    #LINE ET NINA
    list1=[
    [0,0,0,0,0,0,0,0,0],
    [0,0,0,0,0,0,0,0,0],
    [0,0,0,0,0,0,0,0,0],
    [0,0,0,0,0,0,0,0,0],
    [0,0,0,0,0,0,0,0,0],
    [0,0,0,0,0,0,0,0,0],
    [0,0,0,0,0,0,0,0,0],
    [0,0,0,0,0,0,0,0,0],
    [0,0,0,0,0,0,0,0,0]]
    reccur=0
    while reccur<10:
        reccur=0
        ln=random.randint(0,8)
        rw=random.randint(0,8)
        list1[rw][ln]='B'
        for j in range(len(list1)):
            reccur+=list1[j].count('B')
    for i in range(len(list1)):
        list1[i].insert(0,0)
        list1[i].append(0)
    list1.insert(0,[0,0,0,0,0,0,0,0,0,0,0])
    list1.append([0,0,0,0,0,0,0,0,0,0,0])
    for x in range(1,len(list1)-1):
        for y in range(1,len(list1)-1):
            if list1[y][x] != 'B':
                num = 0
                for k in range(3):
                    for l in range(3):
                        if list1[y-1+l][x-1+k] == 'B':
                            num += 1
                list1[y][x] = num
    for a in range(len(list1)):
        list1[a].pop(10)
        list1[a].pop(0)
    list1.pop(10)
    list1.pop(0)
    return list1

def bomb_sqr(ligne,col):
    #LINE
    pygame.draw.rect(screen,RED,((25+50*ligne),(125+50*col),cellsize,cellsize),1)
    pygame.draw.circle(screen,RED, [50+50*ligne, 150+50*col], 15, 15)

def flag_sqr(ligne,col):
    #LINE
    pygame.draw.rect(screen,RED,((25+50*ligne),(125+50*col),cellsize,cellsize),1)
    pygame.draw.rect(screen, WHITE, (40+50*ligne, 130+50*col, 3, 40))
    pygame.draw.polygon(screen, RED, [(40+ligne*50 + 3, 130+col*50), (40+ligne*50 + 25, 130+col*50 + 10), (40+ligne*50 + 3, 130+col*50 + 20)])

def num_sqr(num,ligne,col,color):
    #LINE
    font_size = 50
    font = pygame.font.SysFont(None, font_size)
    pygame.draw.rect(screen,WHITE,((25+50*ligne),(125+50*col),cellsize,cellsize),1)
    number_1 = font.render(num, True, color)
    number_1_rect = number_1.get_rect(center=(50+50*ligne, 150+50*col))
    screen.blit(number_1,number_1_rect)

def screen_grid(list1,color):
    #LINE
    num=[1,2,3,4,5,6,7,8]
    for line in range(9):
        for row in range(9):
            t=list1[row][line]
            for i in range(len(num)):
                if t not in num:
                    if t==0: 
                        sqr(line,row,color)
                    elif t=='O':
                        sqr(line,row,BLACK)
                    elif t=='B':
                        bomb_sqr(line,row)
                    elif t=='F' :
                        flag_sqr(line,row)
                else:
                    num_sqr(str(t),line,row,WHITE) 

def score(list1):
    #LINE
    score=10
    for line in range(len(list1)):
        for row in range(len(list1)):
            if list1[row][line]=='F':
                score-=1
    pygame.draw.rect(screen,WHITE,(300,25,175,75),1)
    font_size = 90
    font = pygame.font.SysFont(None, font_size)
    scr = font.render(str(score), True, (171, 247, 186))
    scr_rect = scr.get_rect(center=(389,65))
    screen.blit(scr,scr_rect)



def case_n(lgn,cl):
    case = pygame.Rect(25+50*lgn,125+50*cl,50,50)
    return case

def  emptycases(lgn, cl):
    #NOELIE
    """ Cette fonction permet de dévoiler toutes les cases vides connectées et les numéros autour des cases vide."""
    for line in range(lgn-1,lgn+2):
        for row in range(cl-1, cl+2):
            if line>=0  and  line<len(vide) and row>=0  and  row<len(vide) :
                if vide[line][row] == 0:
                    if(list1[line][row]==0):
                        vide[line][row] = 'O'
                        emptycases(line,row)
                    elif list1[line][row] in [1,2,3,4,5,6,7,8]:
                        vide[line][row] = list1[line][row] 


            

def show_instructions(instruction):
    #NOELIE
    """Cette fonction permet d'afficher une page avec les règles du jeu puis ajoute un bouton qui permet de lancer la page de jeu"""
    screen_end = pygame.display.set_mode((largeur, hauteur))
    pygame.display.set_caption('Règle du jeu')
    size  = pygame.transform.scale(instruction,(largeur,hauteur))
    screen.blit(size,(0,0))
    border = pygame.Rect(button_x, button_y, button_width, button_height)
    pygame.draw.rect(screen, BLUE,border)
    font_rect  = text.get_rect()
    font_rect.center = border.center
    screen.blit(text, font_rect)
    pygame.display.flip()
    running = True
    while running:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
                sys.exit()
            if event.type == pygame.MOUSEBUTTONDOWN:
                mouse = pygame.mouse.get_pos()
                if button_x <= mouse[0] <= button_x + button_width and button_y <= mouse[1] <= button_y + button_height:
                    running = False

def end_game(jeu):
    #NINA
    '''fonction qui permet d'afficher l'écran de fin du jeu en fonction de la réussite ou de l'échec du joueur.'''
    larg = 500
    haut = 600
    screen_end = pygame.display.set_mode((larg, haut))
    pygame.display.set_caption('Fin du Jeu')
    if jeu == False:
        fin_image = pygame.image.load('Screenshot_1.png') #Enregistre l'image pour l'échec
        fin_image_rect = fin_image.get_rect(center = (250, 250))
    else:
        fin_image = pygame.image.load('Screenshot_2.png') #Enregistre l'image pour la réussite
        fin_image_rect = fin_image.get_rect(center = (250, 250))
    font_button = pygame.font.SysFont('Nunito', 25)
    text_button = font_button.render('Rejouer', True, WHITE)
    button = pygame.Rect(100, 50, 250, 300)
    pygame.draw.rect(screen, WHITE, button, 1)
    font_button_rect = text_button.get_rect()
    font_button_rect.center = border.center

    fin_jeu = True
    while fin_jeu:
        for event in pygame.event.get():
            screen_end.fill(BLACK)
            screen.blit(fin_image, fin_image_rect)
            screen.blit(text_button, font_button_rect)
            if event.type == pygame.QUIT:
                pygame.quit
                sys.exit
                fin_jeu = False
            elif event.type == pygame.MOUSEBUTTONDOWN:
                xi,yi = pygame.mouse.get_pos()
                if button.collidepoint(xi,yi):
                    fin_jeu = False

        pygame.display.flip()


#LINE ET NINA
list1 = grid_list()
vide=[
[0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0]]

list2 = [
[0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0]]
image = pygame.image.load('logo_noir.png')
image = pygame.transform.scale(image, (275, 125))
image_rect = image.get_rect(center = (150, 60))

show_instructions()


jeu = None
game = True
while game:      
    for event in pygame.event.get():
        #LINE
        screen.fill(BLACK)
        screen.blit(image, image_rect.topleft)
        score(vide) 
        screen_grid(vide,GR)
        #NINA
        if event.type == pygame.QUIT:
            game = False
        elif event.type == pygame.MOUSEBUTTONDOWN and event.button == 1:
            xi,yi = pygame.mouse.get_pos()
            #LINE
            for line in range(9):
                for col in range(9):
                    case = case_n(col,line)
                    if case.collidepoint(xi,yi):
                        verif = [1,2,3,4,5,6,7,8,'B','F']
                        if vide == list2 :
                            '''
                            if vide[line][col] not in verif:
                                list1 = grid_list()
                                vide = list2
                            else:
                                '''
                            vide[line][col] = list1[line][col]
                        vide[line][col] = list1[line][col]
                        #NINA
                        if vide == list1 :
                            jeu = True
                            end_game(jeu)
                            game = False
                        
                        elif vide[line][col] == 'B':
                            vide = list1
                            jeu = False
                            end_game(jeu)
                            game = False

                        elif vide[line][col] == 0:
                            vide[line][col] = 'O'
                            emptycases(line, col)
                            
        #LINE
        elif event.type == pygame.MOUSEBUTTONDOWN and event.button == 3:
            xi,yi = pygame.mouse.get_pos()
            for line in range(9):
                for col in range(9):
                    case = case_n(col,line)
                    if case.collidepoint(xi,yi):
                        if vide[line][col] == 0:
                            vide[line][col] = 'F'
                        elif vide[line][col] == 'F':
                            vide[line][col] = 0
                    

    pygame.display.flip()

pygame.quit()
